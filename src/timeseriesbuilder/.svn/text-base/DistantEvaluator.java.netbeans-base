/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package timeseriesbuilder;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ListIterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/**
 *
 * @author felipe
 */
public class DistantEvaluator {


    // Evaluates the Polarity of a set of Entries using the TwitterSentimentAPI
    public static void evaluateEntrySet(EntrySet entrySet) {
        try {
            JSONParser parser = new JSONParser();
            JSONObject prim = new JSONObject();
            JSONArray list = new JSONArray();
            for(Entry entry:entrySet.getEntries()){
                   JSONObject jsonObj = new JSONObject();
                   jsonObj.put("text", entry.getContent());
                   list.add(jsonObj);
            }            
            

            prim.put("data", list);

            //System.out.println(prim);

            URL url = new URL("http://twittersentiment.appspot.com/api/bulkClassifyJson");
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setDoOutput(true);
            conn.setRequestMethod("POST");
            conn.setRequestProperty("Content-Type", "application/json");


            OutputStream os = conn.getOutputStream();
            os.write(prim.toJSONString().getBytes());
            os.flush();


            BufferedReader br = new BufferedReader(new InputStreamReader(
                    (conn.getInputStream())));

            String output;
            while ((output = br.readLine()) != null) {
                // System.out.println(output);

                //Object results = parser.parse(output);
                JSONObject res = (JSONObject) parser.parse(output);

                JSONArray list2 = (JSONArray) res.get("data");

                ListIterator it = list2.listIterator();
                
                ListIterator entIt=entrySet.getEntries().listIterator();

                while (it.hasNext() && entIt.hasNext() ) {
                    
                    JSONObject tmp = (JSONObject) it.next();
                    Entry entry = (Entry) entIt.next();
                    Long textPolarity=(Long)tmp.get("polarity");
                    String polarity;
                    if(textPolarity==0)
                        polarity="negative";
                    else if(textPolarity==2)
                        polarity="neutral";
                    else
                        polarity="positive";                    
                    
                    entry.getMetaData().put("distantSuperPolarity", polarity);
                    
                }



            }

            conn.disconnect();
        } catch (ParseException ex) {
            Logger.getLogger(DistantEvaluator.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DistantEvaluator.class.getName()).log(Level.SEVERE, null, ex);
        } 

    }
}
